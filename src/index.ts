import { app, BrowserWindow, dialog, ipcMain, screen, session } from 'electron';
import { ScreenInfo } from './interfaces/MainInterfaces';
import fs from 'fs'
import path from 'path'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    const {width, height} = screen.getPrimaryDisplay().workArea

    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height,
        width,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
            contextIsolation: false
        },
        autoHideMenuBar: true
    });


    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    // mainWindow.webContents.openDevTools();


    // Get screen width
    ipcMain.handle('screen', (): ScreenInfo => {
        return {width, height}
    })

    // Get images
    ipcMain.handle('images', (e, files: string[]) => {
        const srcPath: string = path.join(__dirname, '../', '../', 'src', 'images')

        return files.map(
            file => fs.readFileSync(`${srcPath}/${file}`, {encoding: 'base64'})
        )
    })

    // Save file
    ipcMain.handle('save', async (e, path: string, base64: string) => {
        await fs.promises.writeFile(path, base64, {encoding: 'base64'})
    })

    // Open save box
    ipcMain.handle('saveDialog', () => {
        const savePath: string = process.env?.HOME ?? process.env?.USERPROFILE ?? './'
        const defaultPath: string = `${savePath}/image.png`

        return dialog.showSaveDialog({defaultPath})
    })
};


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
